#+OPTIONS: num:nil toc:nil
#+REVEAL_TRANS: Fade
#+REVEAL_THEME: none
#+REVEAL_EXTRA_CSS: style.css
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE: 1400px
#+REVEAL_HLEVEL: 1
#+TITLE: Using Vim: Mastering the Dark Arts
#+Author: Benjamin Turner

# NOTE: The terminal size of this presentation is 83x28 and has the font scaled to up a number of times

* Vim is like...
** A Unicorn Horn
  :PROPERTIES:
  :reveal_background: img/unicorn-pug.jpg
  :END:

** The Ax of a Heavy Metal God
  :PROPERTIES:
  :reveal_background: img/brutal-legend.jpg
  :END:

** You're very own Patronus
  :PROPERTIES:
  :reveal_background: img/patronus.jpg
  :END:

** 

When you know how to use it, uncanny things can happen.

* Modal Editing
  :PROPERTIES:
  :reveal_background: img/Dr_Jekyll_and_Mr_Hyde_poster_edit2.jpg
  :END:

There are different *modes*, or /states/ that can be activated.

** Two Main Modes
   - *Normal*
     - "Do stuff" mode. Move around a document, copy and paste, etc.
   - *Insert*
     - Insert text. This is what you're used to in other editors.

** 
   
[[file:./img/vim-two-main-modes.gif]]

* The Vim Language
  
** 

In Normal mode, you can describe exactly what you want to do by executing a series of characters.

** 
  :PROPERTIES:
  :reveal_background: img/movement-prose.gif
  :END:

** Moving between words

   - =w= Move to the start of the next word
   - =e= Move to the end of the next word
   - =b= Move back one word
   - =f.= Move to the next period '.' on this line
   - =fA= Move to the next capital 'A' on this line
   - =F;= Move to the previous semi-colon on this line
     
** Moveing in the document
   
   - =}=  "Move to the next section"
   - =G=  "Move to the end of the document"
   - =gg= "Move to the beginning of the document"

** Changing Things

   - =d= Delete (cut)
   - =y= Yank (copy)
   - =c= Change (delete and change to insert mode)
   
These require a *motion* so that Vim knows /what/ to act on.

** For Example

   - =dip= "Delete in paragraph"
   - =y3w= "Yank the next three words"
   - =ct.= "Change until the next '.'"
   - =dG=  "Delete to the end of the document"
     
** 
  :PROPERTIES:
  :reveal_background: img/vim-two-main-modes.gif
  :END:
  
** 

The above changes are all just keystrokes.

Printing them out on the screen looks like:

#+BEGIN_SRC 
yy3pfjcwflew^[jciwsoared^[jFqc/the^Mslow green turtle crept past ^[
#+END_SRC
     
* Search
 
We think of Vim as primarily text editor...

** 
  - =/= "Start a search going forward in the document"
  - =?= "Start a search going backwards in the document"
  - =n= "Go to the next search hit"
  - =N= "Go to the previous search hit"
    
** 
  :PROPERTIES:
  :reveal_background: img/search-default.gif
  :END:

** This works, but...
   
It's hard to know exactly where the cursor has jumped to. 

What if we could get some better visual feedback?

** Enable Settings
   
   - =:set incsearch= "Turn incremental search on"
   - =:set hlsearch= "Turn highlight search on"
   - =:set number= "Turn line numbers on"
   - =:set wrap= "Turn on line wrapping"

   - =:set noincsearch= "Turn incremental search off"
   - =:set nohlsearch= "Turn highlight search off"
   - =:set nonumber= "Turn line numbers off"
   - =:set nowrap= "Turn off line wrapping"
     
** 
  :PROPERTIES:
  :reveal_background: img/search-settings.gif
  :END:

* Macros
  
Replacing tedious tasks.
  
#+BEGIN_NOTES
Remember how we can describe our changes specifically by using Vim's language?

What if we could store those "descriptions" and replay them whenever we wanted to?
#+END_NOTES

** Registers
   
Vim has *named registers* from =a .. z= 

Think of these like a variable that you can store text in. 

** Record Macros

   - =qq= "Start recording a macro to the 'q' register"
   - =q=  "When done, press q again to stop recording"

** Replay Macros
   
   - =@q=   "Replay the macro in the 'q' register"
   - =@@=   "Replace the last used macro"
   - =12@q= "For twelve times, replay the 'q' macro"

** 
   :PROPERTIES:
   :reveal_background: img/macros-names.gif
   :END:

**   

This is portable. The keystrokes for the above transformation looks like this:

#+BEGIN_SRC 
0cl#^[lly$o^[p:s/ /_/g^M^Vu^[Vu^[i  - https://example.com/^[o  - Notes:^M^[j
#+END_SRC

** 

Because creating and using a macro is so easy, this becomes a great way to apply tedious and repeditive changes.

* Ok, so... neat?
  
#+BEGIN_NOTES
The previous things can all mostly be done with "vi-mode" plugins that are available for other editors.

So why continue with Vim?
#+END_NOTES

* =ex= Mode
  
** 

While "Normal" and "Insert" mode are the most common modes in Vim, Ex-mode is where things really get exciting!

** 

You've probably already made use of this mode with 
    - =:w= Write (save)
    - =:q= Quit
    - =:help ex-cmd-index= -- get a list of all ex commands
      
* Substitute

=:%s/regex/replace/g=
      
** 
   :PROPERTIES:
   :reveal_background: img/ex-mode-substitute.gif
   :END:
   
#+BEGIN_NOTES
Substitute is another useful one, but let's look some more powerful ones.
#+END_NOTES

* Global
   
=:g/regex/command=
   
"Do stuff on lines"

** Global Print

=:g/regex/p=

"Global Regular Expression Print"

** 
   :PROPERTIES:
   :reveal_background: img/ex-mode-print.gif
   :END:

** Global Delete
   
   - =:g/regex/d= "Delete every line matching a regex"
   - =:v/regex/d= "Delete every line NOT matching a regex"
     
** 
   :PROPERTIES:
   :reveal_background: img/ex-mode-delete.gif
   :END:

#+BEGIN_NOTES
Deleting either matching lines or non-matching lines is a great way to "throw-out" visual noise on the way to other things.

In this gif we delete all the lines that don't match our table definitions, and then use a macros to transform those lines into SQL statements.
#+END_NOTES
	
** Global Normal
   
=:g/regex/normal @q=
     
#+BEGIN_NOTES
Returning to our example of markdown names, what if we discover that we want to add some characters to the headings?

We can no longer operate on each individual line, but we /can/ do things that target lines that start with a hash!
#+END_NOTES

** 
   :PROPERTIES:
   :reveal_background: img/ex-mode-global-normal.gif
   :END:

** TODO convert to =.mov=
   :PROPERTIES:
   :reveal_background: img/ex-mode-global-normal-macro.gif
   :END:

* Scripting Vim
  
Vim runs in the terminal...

** 
    =vim -c ":<do-stuff>"=

** Yeah, ok. But when would I actually /use/ that?
   
** Remove Wordfence Database Tables from SQL Dump
   
** 
   :PROPERTIES:
   :reveal_background: img/wordfence-table.png
   :END:
   
#+BEGIN_NOTES
We can see that the dump follows a general pattern:
1. table definition comment
2. table definition SQL
3. table data comment
4. table data SQL
   
In all of those cases, the name of the table is known, so we can search for =_wf.{-}`= to get each of those lines and then delete the "paragraph"
#+END_NOTES

** 
@@html:<video controls width="900" height="600" src="img/wordfence-delete-tables.mov"></video>@@

**  

#+BEGIN_SRC bash
#!/bin/bash
# Usage: remove-wf-tables.sh db.sql
file="$1"
mv "$file" "$file.original"
vim -c 'let @t=""' \
  -c ':g/\v_wf.{-}\`/normal "Tyapdap' \
  -c ":sav $file" \
  -c ':new wf-tables.sql.bak | :normal "tp' \
  -c ':wa | :qa' \
  "$file.original"
#+END_SRC

* Vimgolf  
  
** 
   :PROPERTIES:
   :reveal_background: img/vim-golf.png
   :END:

** 
   :PROPERTIES:
   :reveal_background: img/vim-golf-solutions.png
   :END:

* Is it "worth it" to learn Vim?

* Resources
    - [[https://danielmiessler.com/study/vim/][Daniel Miessler: Learn Vim for the Last Time]]
    - [[http://vimcasts.org/][Vimcasts.org]]
    - [[https://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980][Practical Vim]]
    - [[https://www.vimgolf.com/][VimGolf]]

* Vimgrep
   
=:vimgrep 'search-string' **/*.php=

"Find things in these files"

** TODO gif of vimgrep
   
** Quickfix
   
A list of places within documents.

** 
   
   - =copen= "Open the quickfix window"
   - =cclose= "Close the quickfix window"
   - =cnext= "Display the next error"
   - =cprevious= "Display the previous error"

** 
   
By default Vimgrep will populate the quickfix list which allows you to quickly jump to different locations.

** TODO gif of quickfix
